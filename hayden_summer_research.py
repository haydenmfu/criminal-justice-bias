# -*- coding: utf-8 -*-
"""Hayden Summer Research.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yXMg5dPowhQz2Z7TrUwdAW4wi9KNeTbo
"""

from google.colab import drive
drive.mount('/content/drive')

#PATH = '/content/drive/My Drive/Jane Boettcher/Hayden Fu/' #Jane's example path
PATH = '/content/drive/My Drive/Hayden Fu/'

import pandas as pd

df = pd.read_csv(PATH+"compas-scores-two-years.csv")

df.isnull().sum()

df

df.describe

dfFilter = df[df['is_recid']!= -1]
dfFilter = dfFilter[dfFilter['days_b_screening_arrest'] <= 30]
dfFilter = dfFilter[dfFilter['days_b_screening_arrest'] >= -30]
dfFilter = dfFilter[dfFilter['c_charge_degree'] != 'O']

#dfFilter.drop(columns=['c_arrest_date','r_case_number','r_days_from_arrest','first','last','violent_recid', 'is_violent_recid'])
#dfFilter.drop('column name', inplace=True, axis = 1)
dfFilter.drop(['name','first','last','dob','age_cat','days_b_screening_arrest','c_case_number','r_case_number','r_charge_degree', 'r_offense_date',
       'r_charge_desc', 'r_jail_in', 'r_jail_out', 'vr_case_number',
       'vr_charge_degree', 'vr_offense_date', 'vr_charge_desc','violent_recid','r_days_from_arrest'], inplace=True, axis = 1)
#dfFilter['r_jail_in']
#dfFilter.columns
#dfFilter[dfFilter['r_charge_desc'].isnull()] = "none"
#
dfFilter["c_offense_date"].fillna("no date", inplace = True)
dfFilter["c_charge_desc"].fillna("no descriptions", inplace = True)
#dfFilter.isnull().sum()
#dfFilter
pd.set_option('max_columns', None)
#pd.reset_option('max_columns')
#dfFilter.head()
#df['column name'] = df['column name'].replace(['old value'],'new value')
dfFilter['sex'] = dfFilter['sex'].replace(['Male'],0)
dfFilter['sex'] = dfFilter['sex'].replace(['Female'],1)
dfFilter['v_score_text'] = dfFilter['v_score_text'].replace(['Low'],0)
dfFilter['v_score_text'] = dfFilter['v_score_text'].replace(['Medium'],1)
dfFilter['v_score_text'] = dfFilter['v_score_text'].replace(['High'],2)
dfFilter['score_text'] = dfFilter['score_text'].replace(['Low'],0)
dfFilter['score_text'] = dfFilter['score_text'].replace(['Medium'],1)
dfFilter['score_text'] = dfFilter['score_text'].replace(['High'],2)
dfFilter['race'] = dfFilter['race'].replace(['Other'],0)
dfFilter['race'] = dfFilter['race'].replace(['African-American'],1)
dfFilter['race'] = dfFilter['race'].replace(['Caucasian'],2)
dfFilter['race'] = dfFilter['race'].replace(['Hispanic'],3)
dfFilter['race'] = dfFilter['race'].replace(['Asian'],4)
dfFilter['race'] = dfFilter['race'].replace(['Native American'],5)
dfFilter['compas_screening_date'] = dfFilter['compas_screening_date'].str.slice(start = 0, stop = 4)
dfFilter['v_screening_date'] = dfFilter['v_screening_date'].str.slice(start = 0, stop = 4)
dfFilter['in_custody'] = dfFilter['in_custody'].str.slice(start = 0, stop = 4)
dfFilter['out_custody'] = dfFilter['out_custody'].str.slice(start = 0, stop = 4)
dfFilter['c_jail_in'] = dfFilter['c_jail_in'].str.slice(start = 0, stop = 4)
dfFilter['c_jail_out'] = dfFilter['c_jail_out'].str.slice(start = 0, stop = 4)
dfFilter['c_offense_date'] = dfFilter['c_offense_date'].str.slice(start = 0, stop = 4)
dfFilter['screening_date'] = dfFilter['screening_date'].str.slice(start = 0, stop = 4)
dfFilter['c_jail_duration'] = dfFilter['c_jail_in'].str.slice(start = 0, stop = 4) + "-" + dfFilter['c_jail_out'].str.slice(start = 0, stop = 4)
dfFilter['charge_desc_num'] = pd.factorize(dfFilter.c_charge_desc)[0]+1


print(dfFilter['charge_desc_num'])

#X = dfFilter
#X.columns
#X
#dfFilter

pd.set_option('max_columns', None)
df.describe()

df

len(df.columns)

import numpy as np
import matplotlib.pyplot as plt

recidDesc = pd.DataFrame()
recidDesc['is_recid'] = dfFilter['is_recid']
recidDesc['c_charge_desc'] = dfFilter['c_charge_desc']
recidDesc = recidDesc.reset_index(drop = True)
recidDesc['count'] = pd.Series(np.ones(6171))
recidDesc['charge_desc_num'] = pd.factorize(recidDesc.c_charge_desc)[0]+1
recidDesc.groupby(by=["c_charge_desc"], as_index = False).sum().reset_index()
recidDescCountTotal = recidDesc.groupby(by=["c_charge_desc"], as_index = False).sum().reset_index()
#print(recidDescCountTotal)
recidDesc["percentages"] = recidDescCountTotal["is_recid"] / recidDescCountTotal["count"]
plt.figure(figsize=(40,6))
plt.hist(recidDesc["percentages"][recidDesc["percentages"] <= 1.0], edgecolor = 'black', bins=390)

import sklearn.linear_model
import sklearn.model_selection
import sklearn.metrics
dfFilter

print(dfFilter['decile_score'].unique())

y_by_decile = dfFilter['decile_score'].tolist()
y_true = dfFilter['is_recid'].tolist()
for i in range(len(y_by_decile)):
  if y_by_decile[i] < 6:
    y_by_decile[i] = 0
  else:
    y_by_decile[i] = 1

import matplotlib.pyplot as plt
from sklearn.datasets import make_classification
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
cm = sklearn.metrics.confusion_matrix(y_true, y_by_decile)
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
disp.plot()

from sklearn.datasets import fetch_openml
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import make_pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
import numpy as np
from sklearn.metrics import plot_confusion_matrix

y = np.array(dfFilter["is_recid"])
X = dfFilter.drop(columns = ["compas_screening_date",'v_type_of_assessment','c_charge_desc','c_arrest_date','c_jail_duration','out_custody','in_custody',
                             'v_screening_date','screening_date','c_offense_date','c_jail_out','c_jail_in','c_charge_degree','type_of_assessment','is_recid',
                             'decile_score','c_days_from_compas','is_violent_recid','decile_score.1','score_text','v_decile_score','v_score_text','two_year_recid','event',
                             'priors_count.1'])
X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y,random_state = 0)

clf = make_pipeline(StandardScaler(), LogisticRegression(random_state=0))
clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)
#from sklearn.metrics import roc_curve
#from sklearn.metrics import RocCurveDisplay

#y_score = clf.decision_function(X_test)

#fpr, tpr, _ = roc_curve(y_test, y_score, pos_label=clf.classes_[1])
#roc_display = RocCurveDisplay(fpr=fpr, tpr=tpr).plot()
#sklearn.metrics.roc_auc_score(y_test, y_score)
plot_confusion_matrix(clf, X_test, y_test)  
plt.show()

X_train

print(sklearn.metrics.accuracy_score(y_test, y_pred))
print(sklearn.metrics.average_precision_score(y_test, y_pred))
print(sklearn.metrics.recall_score(y_test, y_pred))
print(sklearn.metrics.f1_score(y_test, y_pred))

dfFilter.columns

X = dfFilter.drop(columns = ["compas_screening_date",'v_type_of_assessment','c_charge_desc','c_arrest_date','c_jail_duration','out_custody','in_custody',
                             'v_screening_date','screening_date','c_offense_date','c_jail_out','c_jail_in','c_charge_degree','type_of_assessment','is_recid',
                             'decile_score','c_days_from_compas','is_violent_recid','decile_score.1','score_text','v_decile_score','v_score_text','two_year_recid','event',
                             'priors_count.1'])
dfFilter['race'] = dfFilter['race'].replace(['Other'],0)
dfFilter['race'] = dfFilter['race'].replace(['African-American'],1)
dfFilter['race'] = dfFilter['race'].replace(['Caucasian'],2)
dfFilter['race'] = dfFilter['race'].replace(['Hispanic'],3)
dfFilter['race'] = dfFilter['race'].replace(['Asian'],4)
dfFilter['race'] = dfFilter['race'].replace(['Native American'],5)


X = dfFilter[['sex', 'age', 'race', 'juv_fel_count', 'juv_misd_count', 'juv_other_count', 'priors_count','priors_count.1']]
X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y,random_state = 0)
race_column = X_test['race']
gender_column = X_test['sex']
age_column = X_test['age']


X_train = X_train.drop(columns=['sex','age'])
X_test = X_test.drop(columns=['sex','age'])
clf = make_pipeline(StandardScaler(), LogisticRegression(random_state=0))
clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)
plot_confusion_matrix(clf, X_test, y_test)  
plt.show()

dfFilter['race'] = dfFilter['race'].replace(['Other'],0)
dfFilter['race'] = dfFilter['race'].replace(['African-American'],1)
dfFilter['race'] = dfFilter['race'].replace(['Caucasian'],2)
dfFilter['race'] = dfFilter['race'].replace(['Hispanic'],3)
dfFilter['race'] = dfFilter['race'].replace(['Asian'],4)
dfFilter['race'] = dfFilter['race'].replace(['Native American'],5)
dfFilter['race'].unique()

X.describe()



print(sklearn.metrics.accuracy_score(y_test, y_pred))
print(sklearn.metrics.average_precision_score(y_test, y_pred))
print(sklearn.metrics.recall_score(y_test, y_pred))
print(sklearn.metrics.f1_score(y_test, y_pred))

def my_true_positives(y_true, y_pred, category):
  ### YOUR CODE HERE ###
  count = 0
  for i in range(len(y_true)):
    if(y_true[i] == y_pred[i] and y_true[i] == category):
      count+=1
  return count
  ### YOUR CODE HERE ###
def my_false_positives(y_true, y_pred, category):
  ### YOUR CODE HERE ###
  count = 0
  for i in range(len(y_true)):
    if(y_pred[i] == category and y_true[i] != category):
      count+=1
  return count
  ### YOUR CODE HERE ###
#
def my_precision(y_true, y_pred, category):
  ### YOUR CODE HERE ###x
  if (my_true_positives(y_true, y_pred, category) + my_false_positives(y_true, y_pred, category))==0:
      return None
  return (my_true_positives(y_true, y_pred, category))/(my_true_positives(y_true, y_pred, category) + my_false_positives(y_true, y_pred, category))
  ### END YOUR CODE ###

def my_false_negatives(y_true, y_pred, category):
  ### YOUR CODE HERE ###
  count = 0
  for i in range(len(y_true)):
    if(y_pred[i] != category and y_true[i] == category):
      count += 1
  return count
  ### YOUR CODE HERE ###

def my_recall(y_true, y_pred, category):
  ### YOUR CODE HERE ###
  if (my_true_positives(y_true, y_pred, category) + my_false_negatives(y_true, y_pred, category)) == 0:
      return None
  return (my_true_positives(y_true, y_pred, category))/(my_true_positives(y_true, y_pred, category) + my_false_negatives(y_true, y_pred, category))
  ### END YOUR CODE ###

def print_stat(y_true,y_pred):
  print(len(y_true))
  print("    Accuracy:",sklearn.metrics.accuracy_score(y_true, y_pred))
  print("    Precision for recidivated:",my_precision(y_true, y_pred,1))
  print("    Precision for not recidivated:",my_precision(y_true, y_pred,0))
  print("    Recall for recidivated:",my_recall(y_true, y_pred,1))
  print("    Recall for not recidivated:",my_recall(y_true, y_pred,0))
  print("    Proportion predicted as not recidivated when recidivated:", my_false_positives(y_true,y_pred,0)/len(y_pred))
  print("    Proportion predicted as recidivated when not recidivated:", my_false_positives(y_true,y_pred,1)/len(y_pred))

def print_statistics(y_true,y_pred,race_column):
  print("Overall statistics:")
  print_stat(y_true,y_pred)
  races = np.unique(race_column)
  for r in races:
    print("Statistics for race =",r,":")
    indices = np.where(race_column==r)
    print_stat(y_true[indices],y_pred[indices])

X_train

print_statistics(y_test,y_pred,np.array(race_column))

#0 = other
#1 = African-American
#2 = Caucasian
#3 = Hispanic
#4 = Asian
#5 = Native American
#

# Import Library

import numpy as np
import matplotlib.pyplot as plt


#Race 0
#Recall for recidivated: 0.3888888888888889
#Race 1
#Recall for not recidivated: 0.8406779661016949
#Race 2
#Recall for recidivated: 0.34579439252336447
#Race 3
#Recall for recidivated: 0.36
#Race 4
#Recall for recidivated: 0.5
#Race 5
#Recall for recidivated: 1.0

races = ['african-american','caucasian','hispanic','asian','native-american','other']
plt.xticks(rotation = 90)
plt.xlabel('\nRace', fontsize = 20)
plt.ylabel('\nRecall for recidivated\n', fontsize = 20)
#plt.set_xticklabels(races,rotation=90, rotation_mode="anchor", ha="right")
temp = [0.5630630630630631,0.34579439252336447,0.9010989010989011,0.5,1.0,0.47925033467202144]
#African-American = 0.558425197, Caucasian = 0.415596767, Hispanic = 0.351669941, Asian = 0.322580645,
# Native American = 0.545454545, Other = 0.379008746
plt.bar(races, temp)

print_statistics(y_test,y_pred,np.array(gender_column))

print_statistics(y_test,y_pred,np.array(age_column))

np.where('race'==1)[0]



y_true

my_recall(y_test,y_pred,1)

my_recall(y_test,y_pred,0)

import matplotlib.pyplot as plt
from sklearn.datasets import make_classification
from sklearn.metrics import plot_confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

import matplotlib.pyplot as plt
from sklearn.datasets import make_classification
from sklearn.metrics import plot_confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
#X, y = make_classification(random_state=0)
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)
clf = SVC(random_state=0)
clf.fit(X_train, y_train)
SVC(random_state=0)
plot_confusion_matrix(clf, X_test, y_test)  
plt.show()

print(sklearn.metrics.accuracy_score(y_test, y_pred))
print(sklearn.metrics.average_precision_score(y_test, y_pred))
print(sklearn.metrics.recall_score(y_test, y_pred))
print(sklearn.metrics.f1_score(y_test, y_pred))

import numpy as np

import matplotlib.pyplot as plt
dfFiltered = pd.DataFrame()
dfFiltered = dfFilter
plt.xticks(rotation = 90)
plt.xlabel('\nRace\n', fontsize = 20)
plt.ylabel('\nRecidivism Rate\n', fontsize = 20)
dfFiltered['race'] = dfFilter['race'].replace([0],'Other')
dfFiltered['race'] = dfFilter['race'].replace([1],'African-American')
dfFiltered['race'] = dfFilter['race'].replace([2],'Caucasian')
dfFiltered['race'] = dfFilter['race'].replace([3],'Hispanic')
dfFiltered['race'] = dfFilter['race'].replace([4],'Asian')
dfFiltered['race'] = dfFilter['race'].replace([5],'Native American')
plt.hist(dfFiltered['race'][dfFilter['is_recid'] == 1], edgecolor = 'black', bins=5)

plt.hist(dfFilter['race'][dfFilter['is_recid'] == 0], edgecolor = 'black')

plt.figure(figsize=(80,6))
plt.xticks(rotation = 90)
dfFiltered = pd.DataFrame()
dfFiltered = dfFilter
#dfFiltered.loc[dfFilter['c_charge_desc'].isin([])]

plt.hist(dfFilter['c_charge_desc'][dfFilter['is_recid'] == 1], edgecolor = 'black', bins=390)

pd.set_option('display.max_rows', 500)
print(dfFilter['c_charge_desc'][:20])

plt.hist(dfFilter['race'][dfFilter['is_recid'] == 1], edgecolor = 'black')
#Other = 130, African-American = 1773, Caucasian = 874, Hispanic = 197, Asian = 10, Native American = 6
#Other = 343, African-American = 3175, Caucasian = 2103, Hispanic = 509, Asian = 31, Native American = 11
#African-American = 0.558425197, Caucasian = 0.415596767, Hispanic = 0.351669941, Asian = 0.322580645,
# Native American = 0.545454545, Other = 0.379008746

#
#sex, age, race, juv_fel_count, juv_misd_count, juv_other_count, priors_count, c_offense_date, c_charge_degree, c_charge_desc, priors_count.1,

dfFilter

#filterinfDataframe = dfObj[(dfObj['Sale'] > 30) & (dfObj['Sale'] < 33) 
#African American:0.558425197
dfFilter[(dfFilter['race'] == 2) & (dfFilter['is_recid'] == 1)].sum()
#(dfFilter['race'] == 2).sum()